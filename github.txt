형상관리 시스템 (SCM : Source Code Management)
- 프로젝트의 시작부터 끝까지 모든 변동사항을 관리하는 작업

형상관리 꼭 필요한가?
 - 프로젝트의 진행을 위해서 > 개발 과정의 기록 및 사고 예방
 - 형상관리는 프로젝트가 원활히 진행 됐을 때는 문제가 없지만 프로젝트가 잘못됐을 경우는 굉장히 다른 방향으로 사용

 형상관리는 완벽한가?
 - 통제의 어려움
 - 무절제한 변경에 취약 (사람마다 언제 무엇을 할지 모르기때문에 중복되는 작업이 발생)
 - 버전관리는 편하긴 함.

 형상관리의 장점
 - 충돌 방지에 유용 (최소화/완벽방어는 아님)
 - 작업 효율 상승

 형상관리 구성
 1. 기준선
    - 각 형상 항목들의 기술적 통제 시점
    - 모든 변화를 통제하는 시점의 기준
 1-1) 기준선의 종류
    - 기능적 기준선 : 수행계획서 (착수보고서), 요구사항 정의서 (관리대장), 기능 구조도
    - 분배적 기준선 : 엔티티 정의서, 데이터 흐름도, 용어집
    - 설계 기준선 : 인터페이스 설계서,  ERD 설계서, UI 설계서 (정의서), 유스케이스 설계서
    - 시험 기준선 : 단위테스트, 통합테스트 시나리오 (단위 테스트 관리대장, 소스코드 관리대장)
    - 제품 기준선 : 통합테스트 시나리오
    - 운영 기준선 : 사용자/운영자 매뉴얼, 최종산출물 (종료보고서)

 프로젝트 수행단계 (일반적인 프로젝트의 수행과정)
    -  기획/분석 > 설계 > 구현 > 테스트 > 오픈


 2. 형상 항목
    - 프로젝트에서 공식적으로 정의되어 관리되는 모든 대상
 3. 형상 버전관리
    - 기준선을 설정한후 일어난 변경의 고유 식별번호
    테스트 시나리오 최종 수정 (최종)
    테스트 시나리오 최종 수정 (진짜최종)
    테스트 시나리오 최종 수정 (진짜진짜마지막)
 4. 형상 제품
    - 형상의 항목 대상이 되는 제품

형상관리? 버전관리?
    - 일반적으로는 형상관리 = 버전관리

형상관리(버전관리)를 통해 기대효과
    - 백업, 복구도 유용하게
    - 환경만 연결되어있으면 어디에서도 가능할 수 있음
    - 버전관리를 통해서 원하는 시점으로 다시 돌아가는 것도 가능

버전관리 종류
1. 로컬 버전관리 시스템 (개인)
2. 중앙집중식 버전관리 시스템 (서버는 한개 여러명의 클라이언트)
    - 사용자 관리, 서버 관리가 용이하다.
    - 중앙 서버가 문제가 생기면 큰일남~~~~~~~!
3. 분산 버전관리 시스템

형상관리 툴의 종류
    - git, svn, cvs

    1.cvs
     - 중앙 저장소가 존재하고 그 중앙 저장소에 모든 사용자가 접근할 수 있도록 설계된 형상관리 시스템
     - 시스템이 굉장히 안정적
     - 이력관리 당연히 가능
     - 단점은 코드를 업로드 하다가 (커밋) 오류가 발생하면 되돌리는 것(롤백)은 불가능

     2. SVN - (redmine)
     - 커밋이 엉킬 일은  없다 (다른 사용자와 중첩X)
     - 실패시, 롤백 기능을 지원
     - 속도가 빠르고 개별 버전 관리가 가능
     - 안정성이 많이 떨어지고 히스토리 관리가 쉽지 않음

     3. git
     - 저장소 원본 자체를 로컬 (= 내 PC)에 저장할 수 있음
     - 처리 속도가 빠름, 작업 이력관리가 쉬움
     - 커밋한 내용도 수정 가능
     - 장소에 구애받지 않음 (인터넷만 가능 + 권한이 있으면 접근 가능)

git을 다루기 위한 간단한 리눅스 명령어

pwd : 현재 위치의 경로를 표현.
ls : 현재 디렉토리에 존재하고 있는 모든 파일들을 보여줌.
  - a : 숨김파일과 디렉토리도 표시
  - l  : 파일이나 디렉토리의 상세정보를 함께 표시
  - r : 파일의 정렬순서를 거꾸로 표시
  - t : 파일 작성시간 순으로 표시.
clear : 크을린 하게 화면을 정리.
 - <---- 명령에 option 추가.

cd : 터미널에서 디렉토리 사이를 이동할때 쓰는 명령어
 - .. <----- 상위 디렉토리로 이동
 cd 디렉토리명 <----- 해당 경로에서 해당 디렉토리로 이동.
 ~ <---- 처음 출발한 홈 디렉토리로 이동
 ./ <---- 현재 사용자가 작업중인 디렉토리
 ../ <---- 현재 디렉토리의 상위 디렉토리

mkdir : 디렉토리 만들기

rm : 디렉토리 삭제
 -r : 해당 디렉토리와 하위 디렉토리, 파일까지 모두 삭제.

-- git 사용자 등록
-- 이메일, 이름

git 저장소생성(초기화)
git init

저장소를 처음쓸때에는 유저 등록이 필요
global은 본인만 사용하는 pc라면 따로 등록할필요가
없어서 다른 저장소로 붙을때에도 편리함.
git config --global user.email "이메일주소"
git config --global user.name "이름"

등록후 제대로 등록되었는지 확인할것
git config --list

등록이 잘못되었을경우(삭제)
git config --unset --global user.email "이메일주소"
git config --unset --global user.name "이름"